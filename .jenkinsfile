pipeline{
    agent any
    environment { 
        commitHash = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
        remoteServer = "10.24.169.112"
    }
    stages {
        stage ("docker build"){
            steps{
                script{
                        // def 
                        sh "docker build -t trankimtep/$env.JOB_NAME:$commitHash ."         
                    
                }                
            }
        }
        stage ("docker push"){
            steps{
                withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
        	        sh ('docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD')
                    sh "docker push trankimtep/$env.JOB_NAME:$commitHash"
                }
            }
        }
        stage("SSH to DB Server") {
            steps {
                script {
                    // Define the SSH server details
                    def server = "10.24.169.112"
                    def remoteDir = "/path/to/remote/directory"
                    
                    // Define the SSH key credential ID
                    def sshCredentialId = 'ssh-key-to-DBserver'
                    
                    // Command to run (e.g., 'ls' in this case)
                    // def command = 'docker run -d -p 8000:8000 trankimtep/${env.JOB_NAME}:${commitHash}'
                    
                    // Execute the SSH command
                    withCredentials([sshUserPrivateKey(credentialsId: sshCredentialId, keyFileVariable: 'SSH_PRIVATE_KEY', usernameVariable: 'userName')]) {
                        sh "ssh -o StrictHostKeyChecking=no -i \$SSH_PRIVATE_KEY ${userName}@${server} docker run --rm --name ${env.JOB_NAME} -d -p 8000:8000 trankimtep/${env.JOB_NAME}:${commitHash}"
                    }
                }
            }
        }
    }
}